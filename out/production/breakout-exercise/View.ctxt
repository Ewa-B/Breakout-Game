#BlueJ class context
comment0.target=View
comment1.params=
comment1.target=Model\ getModel()
comment10.params=
comment10.target=boolean\ gameOver()
comment10.text=\r\n\ Method\ responsible\ for\ checking\ if\ the\ game\ state\ is\ 'finished'.\ <br>\r\n\ Uses\ writeScore()\ to\ add\ to\ the\ map.<br>\r\n\ Uses\ toFile()\ from\ controller\ to\ write\ to\ the\ file.<br>\r\n\ Displays\ 'game-over'\ GIF\ on\ the\ screen\ and\ plays\ the\ music.\r\n\ @return\ true\ whe\ the\ game\ is\ over\r\n
comment11.params=
comment11.target=void\ displayButton()
comment11.text=\r\n\ Adds\ "Restart\ game"\ button\ the\ the\ pane\ only\ when\ game\ is\ over\r\n
comment12.params=
comment12.target=void\ displayBricks()
comment12.text=\r\n\ Method\ to\ display\ visible\ bricks\r\n
comment13.params=go
comment13.target=void\ displayGameObj(GameObj)
comment13.text=\r\n\ Display\ a\ game\ object\ -\ create\ a\ Rectangle\ object\ (if\ necessary)\ and\ add\ it\ to\ the\ Pane\ in\ the\ right\ position\r\n\ @param\ go\ Game\ Object\r\n
comment14.params=
comment14.target=void\ update()
comment14.text=\r\n\ This\ is\ how\ the\ Model\ talks\ to\ the\ View\r\n\ \ This\ method\ gets\ called\ BY\ THE\ MODEL,\ whenever\ the\ model\ changes\r\n\ \ It\ has\ to\ do\ whatever\ is\ required\ to\ update\ the\ GUI\ to\ show\ the\ new\ game\ position\r\n
comment15.params=
comment15.target=int\ getWidth()
comment16.params=width
comment16.target=void\ setWidth(int)
comment17.params=
comment17.target=int\ getHeight()
comment18.params=height
comment18.target=void\ setHeight(int)
comment19.params=
comment19.target=javafx.scene.layout.Pane\ getPane()
comment2.params=model
comment2.target=void\ setModel(Model)
comment20.params=pane
comment20.target=void\ setPane(javafx.scene.layout.Pane)
comment21.params=
comment21.target=javafx.scene.control.Label\ getInfoText()
comment22.params=
comment22.target=javafx.scene.control.Label\ getLivesText()
comment23.params=infoText
comment23.target=void\ setInfoText(javafx.scene.control.Label)
comment24.params=
comment24.target=Controller\ getController()
comment25.params=controller
comment25.target=void\ setController(Controller)
comment26.params=
comment26.target=GameObj\ getBat()
comment27.params=bat
comment27.target=void\ setBat(GameObj)
comment28.params=
comment28.target=GameObj\ getBall()
comment29.params=ball
comment29.target=void\ setBall(GameObj)
comment3.params=w\ h
comment3.target=View(int,\ int)
comment30.params=
comment30.target=GameObj[]\ getBricks()
comment31.params=bricks
comment31.target=void\ setBricks(GameObj[])
comment32.params=
comment32.target=int\ getScore()
comment33.params=score
comment33.target=void\ setScore(int)
comment34.params=
comment34.target=java.util.HashMap\ getRectangleStore()
comment35.params=rectangleStore
comment35.target=void\ setRectangleStore(java.util.HashMap)
comment36.params=livesText
comment36.target=void\ setLivesText(javafx.scene.control.Label)
comment37.params=
comment37.target=java.lang.String\ getLives()
comment38.params=lives
comment38.target=void\ setLives(java.lang.String)
comment39.params=
comment39.target=javafx.scene.control.Button\ getButton()
comment4.params=window
comment4.target=void\ start(javafx.stage.Stage)
comment40.params=button
comment40.target=void\ setButton(javafx.scene.control.Button)
comment41.params=
comment41.target=javafx.scene.control.Button\ getStartButton()
comment42.params=
comment42.target=javafx.scene.layout.Pane\ getLoginPane()
comment43.params=loginPane
comment43.target=void\ setLoginPane(javafx.scene.layout.Pane)
comment44.params=
comment44.target=javafx.scene.control.TextField\ getLoginTF()
comment45.params=loginTF
comment45.target=void\ setLoginTF(javafx.scene.control.TextField)
comment46.params=
comment46.target=javafx.scene.control.Button\ getLoginButton()
comment47.params=loginButton
comment47.target=void\ setLoginButton(javafx.scene.control.Button)
comment48.params=
comment48.target=javafx.scene.control.Label\ getLoginLabel()
comment49.params=loginLabel
comment49.target=void\ setLoginLabel(javafx.scene.control.Label)
comment5.params=event
comment5.target=void\ handle(javafx.scene.input.KeyEvent)
comment5.text=\r\n\ Event\ handler\ for\ key\ presses\ -\ it\ just\ passes\ the\ event\ to\ the\ controller\r\n\ @param\ event\ keyboard\ key\ event\r\n
comment50.params=
comment50.target=java.util.HashMap\ getPlayerScores()
comment51.params=playerScores
comment51.target=void\ setPlayerScores(java.util.HashMap)
comment52.params=
comment52.target=java.lang.String\ getOldScore()
comment53.params=oldScore
comment53.target=void\ setOldScore(java.lang.String)
comment54.params=
comment54.target=java.lang.String\ getLogin()
comment55.params=pauseButton
comment55.target=void\ setPauseButton(javafx.scene.control.Button)
comment6.params=
comment6.target=void\ drawPicture()
comment6.text=\r\n\ Method\ drawing\ the\ game\ image\r\n
comment7.params=
comment7.target=void\ addToMap()
comment7.text=\r\n\ Method\ adding\ content\ of\ the\ text\ File\ into\ the\ 'playersScores'\ hashmap\r\n\r\n
comment8.params=
comment8.target=void\ writeScores()
comment8.text=\r\n\ This\ method\ is\ called\ when\ game\ is\ over.<br>\r\n\ It\ makes\ sure\ that\ the\ score\ saved\ into\ the\ map\ and\ than\ into\ the\ file\r\n\ is\ bigger\ than\ already\ existing\ one.\r\n
comment9.params=
comment9.target=java.lang.String\ previousScore()
comment9.text=\r\n\ This\ method\ the\ score\ from\ the\ Hash\ Map<br>\r\n\ String\ returned\ will\ be\ shown\ at\ the\ top\ of\ the\ screen.\r\n\ @return\ score,\ if\ player\ already\ exist\ in\ the\ Map\ it\ returns\ the\ saved\ score,\ otherwise\ returns\ zero.\r\n
numComments=56
